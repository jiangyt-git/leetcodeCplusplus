一.快慢指针----》链表题的位置相关题目：
  1.链表中是否有环，
    快慢指针，一个走一步，一个走两步，相遇即有环
  2.链表中是否有环，环的起始位置
    快慢指针，一个走一步，一个走两步，相遇即有环。
    相遇后，一个指针重置，按同样的速度走，再度相遇即为环的起始位置。
    第一次相遇时，一个走了k步，另一个走了2k步，相差k步，则环长为k。
    设相聚点据环起始位置为m,则从起始点到环起始点为k-m，
    从相遇点继续走，据开始也正好为k-m。
  3.环的中点
    快慢指针，一个走一步，一个走两步，快的到终点时，慢的到中点。
    链表的长度是奇数时，slow 恰巧停在中点位置；如果长度是偶数，slow 最终的位置是中间偏右：
  4.环的倒数第k个几点
    快慢指针，一个先走k步，然后两个一起走，快的到终点时，慢的到环的倒数第k个几点。
二、左右指针
    二分搜索、两数之和、反转数组等等。只要数组有序，就应该想到双指针技巧。
  二分框架：
    符合在有序数组中搜索给定的某个目标值的索引，即连续的空间线性搜索，这就是二分查找可以发挥作用的标志。
    for (int i = 0; i < n; i++)
      if (isOK(i))
          return ans;
          
    模板
      int binary_search(int[] nums, int target) {
      int left = 0, right = nums.length - 1; 
      while(left <= right) {
          int mid = left + (right - left) / 2;
          if (nums[mid] < target) {
              left = mid + 1;
          } else if (nums[mid] > target) {
              right = mid - 1; 
          } else if(nums[mid] == target) {
              // 直接返回
              return mid;
          }
      }
      // 直接返回
      return -1;
    }

    int left_bound(int[] nums, int target) {
        int left = 0, right = nums.length - 1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] < target) {
                left = mid + 1;
            } else if (nums[mid] > target) {
                right = mid - 1;
            } else if (nums[mid] == target) {
                // 别返回，锁定左侧边界
                right = mid - 1;
            }
        }
        // 最后要检查 left 越界的情况
        if (left >= nums.length || nums[left] != target)
            return -1;
        return left;
    }


    int right_bound(int[] nums, int target) {
        int left = 0, right = nums.length - 1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] < target) {
                left = mid + 1;
            } else if (nums[mid] > target) {
                right = mid - 1;
            } else if (nums[mid] == target) {
                // 别返回，锁定右侧边界
                left = mid + 1;
            }
        }
        // 最后要检查 right 越界的情况
        if (right < 0 || nums[right] != target)
            return -1;
        return right;
    }
三、滑动窗口
  76.最小覆盖子串 寻找T中包含S所有字符串的最小字串，保证唯一。
  567.字符串的排列 
  438.找到字符串中所有字母异位词 
  3.无重复字符的最长子串
  思路：  
  1、我们在字符串 S 中使用双指针中的左右指针技巧，初始化 left = right = 0，把索引左闭右开区间 [left, right) 称为一个「窗口」。
  2、我们先不断地增加 right 指针扩大窗口 [left, right)，直到窗口中的字符串符合要求（包含了 T 中的所有字符）。
  3、此时，我们停止增加 right，转而不断增加 left 指针缩小窗口 [left, right)，直到窗口中的字符串不再符合要求（不包含 T 中的所有字符了）。同时，每次增加 left，我们都要更新一轮结果。
  4、重复第 2 和第 3 步，直到 right 到达字符串 S 的尽头。

  思维伪代码：
  int left = 0, right = 0;
  while (right < s.size()) {`
      // 增大窗口
      window.add(s[right]);
      right++;

      while (window needs shrink) {
          // 缩小窗口
          window.remove(s[left]);
          left++;
      }
  }


    /* 滑动窗口算法框架 */
    void slidingWindow(string s, string t) {
        unordered_map<char, int> need, window;
        for (char c : t) need[c]++;

        int left = 0, right = 0;
        int valid = 0; 
        while (right < s.size()) {
            // c 是将移入窗口的字符
            char c = s[right];
            // 右移窗口
            right++;
            // 进行窗口内数据的一系列更新
            ...

            /*** debug 输出的位置 ***/
            printf("window: [%d, %d)\n", left, right);
            /********************/

            // 判断左侧窗口是否要收缩
            while (window needs shrink) {
                // d 是将移出窗口的字符
                char d = s[left];
                // 左移窗口
                left++;
                // 进行窗口内数据的一系列更新
                ...
            }
        }
    }
    
