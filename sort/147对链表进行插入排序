/**
插入排序算法：
插入排序是迭代的，每次只移动一个元素，直到所有元素可以形成一个有序的输出列表。
每次迭代中，插入排序只从输入数据中移除一个待排序的元素，找到它在序列中适当的位置，并将其插入。
重复直到所有输入数据插入完为止。
 
输入: 4->2->1->3
输出: 1->2->3->4
输入: -1->5->3->4->0
输出: -1->0->3->4->5

思路找到要插入的位置的前一个（因为只有next指针），所以必须找到前一个，
头节点没有前一个，所以需要一个虚拟头节点， 如果在最前面插入，就可以插在虚拟头节点的next。
虚拟头节点为next，可以统一处理插入,新链表的结尾永远是null，两个链表没有连接在一起。

 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* insertionSortList(ListNode* head) {
      if (!head || !(head->next)) {
        return head;
      }
      // 虚拟头节点
      ListNode * ret = new ListNode(0);
      // 要插入节点的前一个节点
      ListNode * pre = ret;
      ListNode * p = head;
      
      while (p) {
        
        // 寻找真正的pre的位置 
        while ((pre -> next)  && pre->next->val < p->val) {
          pre = pre -> next;
        }
        // 插入 pre之后
        ListNode * tmp = p -> next;
        p -> next = pre -> next;
        // 继续下一个节点， 两个链表之间不需要连接
        pre -> next = p;
        // 归位，重新开始
        pre = ret; 
        p = tmp;
      } 
      return ret->next;
    }
};
